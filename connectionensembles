{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "b1fb8d78-96cd-44cb-8e4e-6567d3bf6f70",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "from scipy import signal\n",
    "import datetime\n",
    "# from pykalman import KalmanFilter\n",
    "import statsmodels.api as sm\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from statsmodels.tsa.stattools import grangercausalitytests\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import IsolationForest\n",
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from scipy.stats import ks_2samp\n",
    "import xgboost as xgb\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MaxAbsScaler\n",
    "from scipy.special import inv_boxcox\n",
    "from sklearn.decomposition import PCA\n",
    "import catboost as cb\n",
    "import logging\n",
    "import lightgbm as lgb\n",
    "import json\n",
    "from io import StringIO\n",
    "from itertools import combinations\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from scipy.stats import pearsonr\n",
    "import re\n",
    "import warnings\n",
    "import glob\n",
    "import pickle\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "16248ac3-6f07-4731-9bbc-23ad70116ecc",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "PRED_LEN = 1\n",
    "\n",
    "constants = {\n",
    "    'threshold': 0.07,\n",
    "    'imput_linear': True,\n",
    "    'post_process_data_mode': {\n",
    "        'Box-Cox': {'active': False},\n",
    "        'YeoJohnson': {'active': False},\n",
    "        'FirstDiff': {'active': False},\n",
    "        'Log_return': {'active': False},\n",
    "        'Log': {'active': False},\n",
    "        'None': {'active': True}}\n",
    "}\n",
    "\n",

    "PREDICTORS_PATH = f\"predictors.csv\"\n",
    "TARGET_PATH = f\"target.csv\"\n",
    "\n",
    "# Создаем шаблон для поиска файла\n",
    "search_pattern_log = '*.log'\n",
    "search_pattern_trata = 'trata*.csv'\n",
    "search_pattern_comb = '*.parquet'\n",
    "\n",
    "\n",
    "# Используем glob для поиска файла в текущей директории\n",
    "FILES_LOG = glob.glob(search_pattern_log)[0]\n",
    "FILES_TRATA = glob.glob(search_pattern_trata)[0]\n",
    "FILES_COMB = glob.glob(search_pattern_comb)[0]\n",
    "\n",
    "FILES_CONSTS = {\n",
    "    'data':FILES_TRATA,\n",
    "    'comb_models':FILES_COMB,\n",
    "    'df_predictors':PREDICTORS_PATH,\n",
    "    'df_target':TARGET_PATH\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "7addf920-6e0f-4380-bfad-90ce68815167",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Model_filter:\n",
    "    def __init__(self,data):\n",
    "        self.data = data\n",
    "        self.logger = logging.getLogger('my_logger')\n",
    "        \n",
    "    def normalizer_predictions(self):\n",
    "        cols = ['Cat_data_act_pred', 'Xgb_data_act_pred', 'Lgb_data_act_pred']\n",
    "        for col in cols:\n",
    "            self.data[col] = self.data[col].apply(lambda x: pd.read_csv(StringIO(x), delim_whitespace=True, index_col=0))\n",
    "            \n",
    "    def output_model_filter(self):\n",
    "        self.logger.info(f\"Cleaned Preds and Actual in {self.__class__.__name__}\")\n",
    "        self.normalizer_predictions()\n",
    "        \n",
    "        return self.data"
   ]
  },


  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "e8522542-2abc-438a-a632-a01a5289d710",
   "metadata": {
    "tags": []
   },


   "outputs": [],
   "source": [
    "class Selected_models:\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "        self.top_models = None\n",
    "        self.combination_list = None\n",
    "        self.top_ensembles = None\n",
    "        self.logger = logging.getLogger('my_logger')\n",
    "        \n",
    "    def sorter_mae(self):\n",
    "        # sorted_data = self.data.copy()\n",
    "        # sorted_data['MAE'] = sorted_data['Pred'].apply(lambda x: mean_absolute_error(sorted_data['True'][0], x))\n",
    "        \n",
    "        sorted_data = self.data.sort_values(by='Mape').copy()\n",
    "        sorted_data = sorted_data.drop_duplicates(subset='Index')\n",
    "        sorted_data.reset_index(drop=True, inplace=True)\n",
    "        self.top_models = sorted_data.nsmallest(12, 'Mape')\n",
    "        return self.top_models\n",
    "        \n",
    "    def combination_models(self):\n",
    "        self.combination_list = list(combinations(self.top_models['Index'].unique(), 2)) + list(combinations(self.top_models['Index'].unique(), 3)) + list(combinations(self.top_models['Index'].unique(), 4))\n",
    "        return self.combination_list\n",
    "    \n",
    "    def final_selector(self):\n",
    "        # Инициализируем пустой список для средних значений True\n",
    "        average_pred_values = []\n",
    "\n",
    "        # Обходим каждую комбинацию\n",
    "        for combination in self.combination_list:\n",
    "            \n",
    "            # Выбираем строки, соответствующие текущей комбинации моделей\n",
    "            subset = self.top_models[self.top_models['Index'].isin(combination)]\n",
    "\n",
    "            # Считаем среднее значение по колонке 'True'\n",
    "            average_pred = subset['Pred'].mean()\n",
    "\n",
    "            # Добавляем среднее значение в список\n",
    "            average_pred_values.append(average_pred)\n",
    "\n",
    "        # Создаем датафрейм с результатами\n",
    "        result_df = pd.DataFrame({'Model Combination': self.combination_list, 'Prediction': average_pred_values, 'True': [self.top_models['True'][0]] * len(average_pred_values)})\n",
    "\n",
    "        # Вывод результата\n",
    "        result_df['Correlation'] = result_df['Prediction'].apply(lambda x: pearsonr(x, result_df['True'][0])[0])\n",
    "        result_df['Mape'] = result_df['Prediction'].apply(lambda x: np.mean(np.abs((result_df['True'][0] - np.array(x)) / result_df['True'][0])) * 100)\n",
    "        result_df['MSE'] = result_df['Prediction'].apply(lambda x: mean_squared_error(result_df['True'][0], x))\n",
    "        result_df['MAE'] = result_df['Prediction'].apply(lambda x: mean_absolute_error(result_df['True'][0], x))\n",
    "        result_df['RMSE'] = result_df['Prediction'].apply(lambda x: np.sqrt(mean_squared_error(result_df['True'][0], x)))\n",
    "        result_df['R2'] = result_df['Prediction'].apply(lambda x: r2_score(result_df['True'][0], x))\n",
    "        result_df['Ensemble_n'] = result_df['Model Combination'].apply(lambda x: len(x))\n",
    "        \n",
    "        self.top_ensembles = result_df.nlargest(1, 'Correlation')\n",
    "        self.top_ensembles.reset_index(drop=True, inplace=True)\n",
    "        \n",
    "        return self.top_ensembles\n",
    "    \n",
    "    def selected_models_output(self):\n",
    "        self.sorter_mae()\n",
    "        self.combination_models()\n",
    "        self.final_selector()\n",
    "        self.logger.info(f\"Models have been sorted in {self.__class__.__name__}\")\n",
    "        \n",
    "        return self.top_ensembles['Model Combination'][0]"
   ]
  },

  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "72e2192c-8fe5-4657-be0f-f5e83450cf9d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class DataFrameProcessor:\n",
    "    \n",
    "    '''\n",
    "    Class состоит из двух датафреймов, которые будут подвергается обработке для передачи в последующий класс\n",
    "    \n",
    "    Методы класса:\n",
    "    Очистка по уровню thresh\n",
    "    Линейная и Кубическая интерполяция пропущенных переменных\n",
    "    Преобразование данных по нескольким принципам, чтобы в конце рассмаотреть перфомансы решений в моделях\n",
    "    \n",
    "    df_predictors - датасет фичей\n",
    "    df_target - датасет таргета\n",
    "    '''\n",
    "    \n",
    "    def __init__(self, df_predictors, df_target, columns_predictors, constants):\n",
    "        self.df_predictors = df_predictors\n",
    "        self.df_target = df_target\n",
    "        self.columns_predictors = columns_predictors\n",
    "        self.constants = constants\n",
    "        self.retransform = None\n",
    "        self.df_combined = None\n",
    "        self.logger = logging.getLogger('my_logger')\n",
    "        \n",
    "        \n",
    "    def handle_exceptions(self, func, *args, **kwargs):\n",
    "        try:\n",
    "            return func(*args, **kwargs)\n",
    "        except ValueError as ve:\n",
    "            self.logger.error(f\"Our Value Error in {func.__name__}: {ve}\")\n",
    "        except KeyError as ke:\n",
    "            self.logger.error(f\"Our KeyError in {func.__name__}: {ke}\")\n",
    "        except Exception as e:\n",
    "            self.logger.error(f\"Ошибка в методе {func.__name__}: {e}\")\n",
    "        \n",
    "    def find_date_column(self, df):\n",
    "        # Статика на возможные колонки для проверки есть ли они в датафреймах\n",
    "        date_column_names = ['date', 'datetime', 'datetimeindex', 'dateindex', \n",
    "                             'time', 'timeindex', 'timestamp', 'period_from']\n",
    "\n",
    "        for column_name in df.columns:\n",
    "            # Приводим имя столбца к нижнему регистру для сравнения\n",
    "            lower_column_name = column_name.lower()\n",
    "            for date_name in date_column_names:\n",
    "                if date_name.lower() in lower_column_name:\n",
    "                    return column_name\n",
    "        \n",
    "    def transform_and_sort_dates(self):\n",
    "        # Оставляем нужные колонки через лист оп предиктору\n",
    "        self.df_predictors = self.df_predictors[self.columns_predictors]\n",
    "        \n",
    "        # Проверка индексов фреймов и возможный резет их в колонку\n",
    "        if self.df_predictors.index.name == None:\n",
    "            Index_col = self.find_date_column(self.df_predictors)\n",
    "            self.df_predictors = self.df_predictors.rename(columns={Index_col: 'date'})\n",
    "            \n",
    "        else:\n",
    "            Index_col = self.df_predictors.index.name\n",
    "            self.df_predictors = self.df_predictors.reset_index()\n",
    "            self.df_predictors = self.df_predictors.rename(columns={Index_col: 'date'})\n",
    "            \n",
    "        if self.df_target.index.name == None:\n",
    "            Index_col = self.find_date_column(self.df_target)\n",
    "            self.df_target = self.df_target.rename(columns={Index_col: 'date'})\n",
    "            \n",
    "        else:\n",
    "            Index_col = self.df_target.index.name\n",
    "            self.df_target = self.df_target.reset_index()\n",
    "            self.df_target = self.df_target.rename(columns={Index_col: 'date'})\n",
    "        \n",
    "        \n",
    "        # Преобразуем колонку 'date' в формат datetime\n",
    "        self.df_predictors['date'] = pd.to_datetime(self.df_predictors['date']).dt.date\n",
    "        self.df_target['date'] = pd.to_datetime(self.df_target['date']).dt.date\n",
    "\n",
    "        # Сортируем данные по колонке 'date'\n",
    "        self.df_predictors.sort_values(by=['date'], ascending=True, inplace=True)\n",
    "        self.df_target.sort_values(by=['date'], ascending=True, inplace=True)\n",
    "        \n",
    "        # Переименовываем таргет колонку таргет сета\n",
    "        self.df_target.rename(columns={self.df_target.columns[1]: 'Target'}, inplace=True)\n",
    "\n",
    "        # Резетим индексы\n",
    "        self.df_predictors.reset_index(drop=True, inplace=True)\n",
    "        ####\n",
    "        self.df_target = self.df_target[(self.df_target['date'] >= self.df_predictors['date'].iloc[0]) & (self.df_target['date'] <= self.df_predictors['date'].iloc[-1])]\n",
    "        ####\n",
    "        self.df_target.reset_index(drop=True, inplace=True)\n",
    "        \n",
    "        # Запись в лог debug\n",
    "        self.logger.debug(f\"Data transformed in {self.__class__.__name__}\")\n",
    "\n",
    "    def process_data(self):\n",
    "        \n",
    "        '''\n",
    "        Дроп колонок с первыми двумя и одним пропущенным значениями\n",
    "        Imputations пропущенных переменных двумя выбранными методами\n",
    "        Linear - линеный\n",
    "        Cubic - кубический сплайн\n",
    "        '''\n",
    "        \n",
    "        self.threshold = self.constants.get('threshold')\n",
    "        self.imput_linear = self.constants.get('imput_linear')\n",
    "        self.logger.debug(f\"Linear: {self.imput_linear}, Thresh: {self.threshold} in {self.__class__.__name__}\")\n",
    "        \n",
    "        # Проверка первых двух значений колонок на NaN\n",
    "        for column in self.df_predictors.columns.drop('date'):\n",
    "            if (pd.isna(self.df_predictors[column].iloc[0]) == True and pd.isna(self.df_predictors[column].iloc[1]) == True) or pd.isna(self.df_predictors[column].iloc[0]) == True:\n",
    "                self.df_predictors = self.df_predictors.drop(column, axis=1)\n",
    "        \n",
    "        # Обработка первого датафрейма: удаление столбцов с более чем threshold NaN\n",
    "        self.df_predictors = self.df_predictors.dropna(thresh = len(self.df_predictors) - round(len(self.df_predictors) * self.threshold), axis=1)\n",
    "        \n",
    "         # Интерполяция двумя методами        \n",
    "        if self.imput_linear == True:\n",
    "            self.df_predictors = self.df_predictors.interpolate(method='linear')\n",
    "            \n",
    "        elif self.imput_linear == False:\n",
    "            self.df_predictors = self.df_predictors.interpolate(method='cubic')\n",
    "        \n",
    "    def post_process_data(self):\n",
    "        \n",
    "        '''\n",
    "        Функция преобразует ряды следующими вариантами трансформаций:\n",
    "        \n",
    "        Box-Cox:\n",
    "        Преобразование Бокса-Кокса (Box-Cox Transformation) - это статистический метод, который используется для стабилизации дисперсии и сделать данные более нормально распределенными.\n",
    "        Этот метод особенно полезен при работе с данными, которые не соответствуют предположениям линейной регрессии или других статистических методов, так как они требуют нормального распределения ошибок\n",
    "        \n",
    "        Yeo-Johnson:\n",
    "        Преобразование Yeo-Johnson - это статистический метод для преобразования данных, подобно методу Бокса-Кокса, но с расширенными возможностями.\n",
    "        Этот метод может быть использован для стабилизации дисперсии и нормализации данных, делая их ближе к нормальному распределению.\n",
    "        Преобразование Yeo-Johnson более гибкое по сравнению с методом Бокса-Кокса, поскольку оно позволяет работать с данными, включая отрицательные значения\n",
    "        \n",
    "        FirstDiff:\n",
    "        Первые разности - это один из методов преобразования временных рядов для устранения нестационарности и создания стационарных данных.\n",
    "        При анализе временных рядов часто сталкиваются с проблемой, когда ряд нестационарен, что может усложнить анализ и прогнозирование.\n",
    "        Первые разности помогают сделать ряд стационарным, путем вычитания значения предыдущего периода из значения текущего периода.\n",
    "        Преобразование первых разностей определяется как разница между текущим значением временного ряда и предыдущим значением\n",
    "        \n",
    "        Log_return:\n",
    "        Метод Log Return (логарифмическая доходность) используется для анализа временных рядов и финансовых данных\n",
    "        Логарифмическая доходность представляет собой нормализованное процентное изменение величины относительно предыдущего периода.\n",
    "        Она позволяет анализировать изменения в данных в процентном выражении, что упрощает сравнение различных активов и временных рядов.\n",
    "        Этот метод часто используется в финансовом анализе для изучения доходности инвестиций, оценки рисков и построения моделей\n",
    "        \n",
    "        Log:\n",
    "        Логарифмирование - это преобразование данных путем взятия натурального логарифма от значений.\n",
    "        Этот метод применяется для уменьшения разброса между значениями и для изменения их масштаба.\n",
    "        Логарифмирование часто используется в анализе данных и статистике с целью линеаризации отклика на независимую переменную.\n",
    "        \n",
    "        '''\n",
    "        \n",
    "        self.post_process_data_mode = self.constants.get('post_process_data_mode')\n",
    "        self.logger.debug(f\"Transormation method is {[method for method, params in self.post_process_data_mode.items() if params['active']][0]} in {self.__class__.__name__}\")\n",
    "        \n",
    "        # Box-Cox трансформация\n",
    "        if self.post_process_data_mode['Box-Cox']['active'] == True:\n",
    "            \n",
    "            # Lambda boxcox таргета\n",
    "            self.retransform = stats.boxcox(self.df_target['Target'])[1]\n",
    "            \n",
    "            self.df_predictors = self.df_predictors.apply(lambda x: stats.boxcox(x)[0] if x.name != 'date' else x)\n",
    "            self.df_target = self.df_target.apply(lambda x: stats.boxcox(x)[0] if x.name != 'date' else x)\n",
    "            \n",
    "        \n",
    "        # YeoJohnson трансформация    \n",
    "        elif self.post_process_data_mode['YeoJohnson']['active'] == True:\n",
    "            \n",
    "            # Lambda yeojohnson таргета\n",
    "            self.retransform = stats.yeojohnson(self.df_target['Target'])[1]\n",
    "            \n",
    "            self.df_predictors = self.df_predictors.apply(lambda x: stats.yeojohnson(x)[0] if x.name != 'date' else x)\n",
    "            self.df_target = self.df_target.apply(lambda x: stats.yeojohnson(x)[0] if x.name != 'date' else x)\n",
    "            \n",
    "            \n",
    "        # FirstDiff трансформация \n",
    "        elif self.post_process_data_mode['FirstDiff']['active'] == True:\n",
    "            # FirstDiff таргета\n",
    "            self.retransform = self.df_target['Target']\n",
    "            \n",
    "            # Преобразованеие первых разностей с дропом колонки 'date' по первому df\n",
    "            for column in self.df_predictors.columns.drop('date'):\n",
    "                self.df_predictors[column] = self.df_predictors[column].diff().dropna()\n",
    "                \n",
    "            self.df_predictors = self.df_predictors.iloc[1:,:]\n",
    "            \n",
    "            # Преобразованеие первых разностей с дропом колонки 'date' по второму df\n",
    "            for column in self.df_target.columns.drop('date'):\n",
    "                self.df_target[column] = self.df_target[column].diff().dropna()\n",
    "                \n",
    "            self.df_target = self.df_target.iloc[1:,:]\n",
    "                \n",
    "        # Log_return трансформация \n",
    "        elif self.post_process_data_mode['Log_return']['active'] == True:\n",
    "            # Log_return таргета\n",
    "            self.retransform = self.df_target['Target']\n",
    "            \n",
    "            # Преобразованеие Log_return с дропом колонки 'date' по первому df\n",
    "            for column in self.df_predictors.columns.drop('date'):\n",
    "                self.df_predictors[column] = self.df_predictors[column].pct_change().dropna()\n",
    "       \n",
    "            self.df_predictors = self.df_predictors.iloc[1:,:]\n",
    "            \n",
    "            # Преобразованеие Log_return с дропом колонки 'date' по второму df\n",
    "            for column in self.df_target.columns.drop('date'):\n",
    "                self.df_target[column] = self.df_target[column].pct_change().dropna()\n",
    "                \n",
    "            self.df_target = self.df_target.iloc[1:,:]\n",
    "            \n",
    "        # Log трансформация \n",
    "        elif self.post_process_data_mode['Log']['active'] == True:\n",
    "            # Log таргета\n",
    "            self.retransform = None\n",
    "            self.df_predictors = self.df_predictors.apply(lambda x: np.log(x) if x.name != 'date' else x)\n",
    "            self.df_target = self.df_target.apply(lambda x: np.log(x) if x.name != 'date' else x)\n",
    "            \n",
    "        elif self.post_process_data_mode['None']['active'] == True:\n",
    "            self.retransform = None\n",
    "            self.df_predictors = self.df_predictors\n",
    "            self.df_target = self.df_target\n",
    " \n",
    "        else: # запишем под else ввод 'None'\n",
    "            self.retransform = None\n",
    "            self.df_predictors = self.df_predictors\n",
    "            self.df_target = self.df_target\n",
    "            \n",
    "    # def merge_dfs(self):\n",
    "    #     self.df_target['date'] = pd.to_datetime(self.df_target['date'])\n",
    "    #     self.df_target.set_index('date',inplace=True)\n",
    "    #     self.df_target = self.df_target.resample(\"1W\").mean()\n",
    "    #     self.df_predictors['date'] = pd.to_datetime(self.df_predictors['date'])\n",
    "    #     self.df_predictors.set_index('date',inplace=True)\n",
    "    #     self.df_predictors = self.df_predictors.resample(\"1W\").mean()\n",
    "    #     # Комбинируем два сета левым мерджем\n",
    "    #     self.df_combined = pd.merge(self.df_target, self.df_predictors, how='inner', left_index=True,right_index=True)\n",
    "    #     self.df_combined = self.df_combined.reset_index()\n",
    "        \n",
    "    #     # Интерполяция двумя методами        \n",
    "    #     if self.imput_linear == True:\n",
    "    #         self.df_combined = self.df_combined.interpolate(method='linear')\n",
    "            \n",
    "    #     elif self.imput_linear == False:\n",
    "    #         self.df_combined = self.df_combined.interpolate(method='cubic')\n",
    "            \n",
    "    #     self.df_combined = self.df_combined.dropna()\n",
    "    #     self.df_combined.reset_index(drop=True,inplace=True)\n",
    "    def merge_dfs(self):\n",
    "\n",
    "        # Комбинируем два сета левым мерджем\n",
    "        self.df_combined = pd.merge(self.df_target, self.df_predictors, how='left', on='date')\n",
    "        \n",
    "        # Интерполяция двумя методами        \n",
    "        if self.imput_linear == True:\n",
    "            self.df_combined = self.df_combined.interpolate(method='linear')\n",
    "            \n",
    "        elif self.imput_linear == False:\n",
    "            self.df_combined = self.df_combined.interpolate(method='cubic')\n",
    "            \n",
    "        self.df_combined = self.df_combined.dropna()\n",
    "        self.df_combined.reset_index(drop=True,inplace=True)\n",
    "\n",
    "    def get_processed_data(self):\n",
    "        self.logger.info(f\"All transformations have been done in {self.__class__.__name__}\")\n",
    "        return self.df_combined, self.retransform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "7fa05468-2095-4563-a357-04a5556aa76b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Ensemble_prediction:\n",
    "    def __init__(self, processed_df, selected_models, comb_models, models):\n",
    "        self.processed_df = processed_df\n",
    "        self.selected_models = selected_models\n",
    "        self.comb_models = comb_models\n",
    "        self.models = models\n",
    "        self.logger = logging.getLogger('my_logger')\n",
    "        \n",
    "    def select_features_models(self):\n",
    "        result = []\n",
    "        pattern = re.compile(r'([A-Za-z]+)(\\d+)')\n",
    "\n",
    "        for entry in self.selected_models:\n",
    "            matches = pattern.findall(entry)\n",
    "            names_and_numbers = [(match[0], int(match[1])) for match in matches]\n",
    "            result.append(names_and_numbers)\n",
    "            \n",
    "        numbers = []\n",
    "        pattern = re.compile(r'\\d+')\n",
    "\n",
    "        for entry in result:\n",
    "            numbers.extend(map(int, pattern.findall(str(entry))))\n",
    "            \n",
    "        features_all = []\n",
    "        for i in numbers:\n",
    "            features_all.append(json.loads(self.models.loc[i, 'features'].replace(\"'\", \"\\\"\")))\n",
    "            \n",
    "        features_all = list(set(sum(features_all, [])))\n",
    "        features_all.remove('Target')\n",
    "        \n",
    "        self.processed_df = self.processed_df[['date', 'Target'] + features_all]\n",
    "        \n",
    "        ready_models = []\n",
    "        for comb in list(set(sum(result, []))):\n",
    "            name = comb[0]\n",
    "            ix = comb[1]\n",
    "\n",
    "            pred_len = PRED_LEN\n",
    "            lookback = models.loc[ix]['lookback']\n",
    "            features_model = json.loads(models.loc[ix, 'features'].replace(\"'\", \"\\\"\"))\n",
    "            features_model.remove('Target')\n",
    "            subframe = self.processed_df[['date', 'Target'] + features_model].copy()\n",
    "            subframe = subframe.drop('date', axis=1).values.astype('float32')\n",
    "\n",
    "            X, y, X_pred = [], [], []\n",
    "            for i in range(len(subframe)-lookback-pred_len):\n",
    "                feature = subframe[i:i+lookback]\n",
    "                target = subframe[i+pred_len+lookback:i+pred_len+lookback+1,0].reshape(-1,1)\n",
    "                feature_pred = subframe[i+pred_len+1:i+pred_len+lookback+1]\n",
    "                X.append(feature)\n",
    "                X_pred.append(feature_pred)\n",
    "                y.append(target)\n",
    "            X, X_pred, y = np.asarray(X, dtype=np.float32), np.asarray(X_pred, dtype=np.float32), np.asarray(y, dtype=np.float32)\n",
    "\n",
    "            data_back = []\n",
    "            data_future_all = []\n",
    "\n",
    "            for i in range(-25-pred_len-1,0,1):\n",
    "                if i != -1:\n",
    "                    backtest_set_X_train = X[:i].reshape(X[:i].shape[0], -1)\n",
    "                    backtest_set_y_train = y[:i].reshape(y[:i].shape[0], -1)\n",
    "                else:\n",
    "                    backtest_set_X_train = X[:].reshape(X[:].shape[0], -1)\n",
    "                    backtest_set_y_train = y[:].reshape(y[:].shape[0], -1)\n",
    "\n",
    "                backtest_set_X_test = X_pred[i].reshape(X_pred[i].shape[0], -1)\n",
    "\n",
    "                if name == 'Lgb':\n",
    "                    model = lgb.LGBMRegressor(verbose = -1)\n",
    "\n",
    "                elif name == 'Xgb':\n",
    "                    model = xgb.XGBRegressor()\n",
    "\n",
    "                elif name == 'Cat':\n",
    "                    model = cb.CatBoostRegressor(verbose=0)\n",
    "\n",
    "                model = model.fit(backtest_set_X_train, backtest_set_y_train)\n",
    "                y_pred = model.predict(backtest_set_X_train[-1].reshape(1,backtest_set_X_train[-1].shape[0]))\n",
    "                data_back.append(round(y_pred[0],2))\n",
    "\n",
    "                data_future_all.append(model.predict(backtest_set_X_test.reshape(1,backtest_set_X_test.shape[0] * backtest_set_X_test.shape[1]))[0])\n",
    "\n",
    "            ready_models.append([name+str(ix), np.array(data_back), processed_df['Target'].values[-25-pred_len-1:], np.array(data_future_all)])\n",
    "\n",
    "        ready_models = pd.DataFrame(ready_models, columns = ['Model', 'Back', 'Real', 'Pred'])\n",
    "        \n",
    "        super_ens = []\n",
    "        for comb in self.selected_models:\n",
    "            model_list = comb.split(', ')\n",
    "            uni = ready_models[ready_models['Model'].isin(model_list)]\n",
    "            super_ens.append([comb, np.round(uni['Back'].mean(),2), uni['Real'].mean(), np.round(uni['Pred'].mean(),2)])\n",
    "            \n",
    "        super_ens = pd.DataFrame(super_ens, columns = ['Model', 'Back', 'Real', 'Pred'])\n",
    "            \n",
    "        new_row = {'Model': self.selected_models,\n",
    "           'Back': np.round(super_ens['Back'].mean(),2),\n",
    "           'Real': super_ens['Real'].mean(),\n",
    "           'Pred': np.round(super_ens['Pred'].mean(),2)}\n",
    "\n",
    "        # Добавление новой строки в DataFrame\n",
    "        super_ens = pd.concat([super_ens, pd.DataFrame([new_row])], ignore_index=True)\n",
    "        \n",
    "        # Финальная сборка датафрейма моделей\n",
    "        ready_models = pd.concat([ready_models, super_ens], ignore_index=True)\n",
    "        \n",
    "        ready_models['Correlation'] = ready_models['Back'].apply(lambda x: pearsonr(x, ready_models['Real'][0])[0])\n",
    "        ready_models['Mape'] = ready_models['Back'].apply(lambda x: np.mean(np.abs((ready_models['Real'][0] - np.array(x)) / ready_models['Real'][0])) * 100)\n",
    "        ready_models['MSE'] = ready_models['Back'].apply(lambda x: mean_squared_error(ready_models['Real'][0], x))\n",
    "        ready_models['MAE'] = ready_models['Back'].apply(lambda x: mean_absolute_error(ready_models['Real'][0], x))\n",
    "        ready_models['RMSE'] = ready_models['Back'].apply(lambda x: np.sqrt(mean_squared_error(ready_models['Real'][0], x)))\n",
    "        ready_models['R2'] = ready_models['Back'].apply(lambda x: r2_score(ready_models['Real'][0], x))\n",
    "        self.logger.info(f\"Ensembles have been done in {self.__class__.__name__}\")\n",
    "        return ready_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "43861535-888b-4d1a-a065-6b981f7f65c6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Output_ensemble:\n",
    "    def __init__(self, processed_df, ensemble_models):\n",
    "        self.processed_df = processed_df\n",
    "        self.ensemble_models = ensemble_models\n",
    "        self.logger = logging.getLogger('my_logger')\n",
    "        \n",
    "    def last_keep(self):\n",
    "        keep_model = self.ensemble_models[-1:]\n",
    "        keep_model = keep_model.reset_index()\n",
    "        \n",
    "        keep_data = pd.DataFrame(keep_model['Pred'][0], columns = [f'{PRED_LEN+1}W'])\n",
    "        keep_data.insert(0, 'date', self.processed_df['date'][-25-PRED_LEN-1:].values)\n",
    "        keep_data.insert(1, 'Back', keep_model['Pred'][0])\n",
    "        keep_data.insert(2, 'Real', self.processed_df['Target'][-25-PRED_LEN-1:].values)\n",
    "\n",
    "        keep_data[f'Back'] = keep_data[f'Back'].shift(PRED_LEN+1)\n",
    "\n",
    "        keep_data.dropna(inplace=True)\n",
    "        keep_data.reset_index(drop=True, inplace=True)\n",
    "        \n",
    "        self.logger.info(f\"Final Result is ready {self.__class__.__name__}\")\n",
    "        return keep_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "20d68397-d97d-4469-b1a3-07f9dec221e0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Загрузка пути из файла\n",
    "with open('pred.pkl', 'rb') as file:\n",
    "    PREDICTORS_PATH = pickle.load(file)\n",
    "    \n",
    "# Загрузка пути из файла\n",
    "with open('target.pkl', 'rb') as file:\n",
    "    TARGET_PATH = pickle.load(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "928c58cd-27de-4081-b026-9b85e15bb18b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n",
    "datefmt = '%Y-%m-%d %H:%M:%S'\n",
    "formatter = logging.Formatter(log_format, datefmt=datefmt)\n",
    "\n",
    "logger = logging.getLogger('my_logger')\n",
    "\n",
    "# Обработчик для записи логов в файл\n",
    "log_handler = logging.FileHandler(FILES_LOG, encoding='utf-8')\n",
    "\n",
    "# Форматтер для логов\n",
    "log_handler.setFormatter(formatter)\n",
    "\n",
    "# Обработчик к логгеру\n",
    "logger.addHandler(log_handler)\n",
    "logger.setLevel(logging.DEBUG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a26dc627-a676-49da-85ff-3915dd176cd7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lookback</th>\n",
       "      <th>granger_lags</th>\n",
       "      <th>granger_pval</th>\n",
       "      <th>cross_lag_max</th>\n",
       "      <th>ls_corr</th>\n",
       "      <th>result_Cat_mse</th>\n",
       "      <th>result_Cat_mae</th>\n",
       "      <th>result_Cat_mape</th>\n",
       "      <th>result_Cat_R2</th>\n",
       "      <th>Cat_data_act_pred</th>\n",
       "      <th>...</th>\n",
       "      <th>result_Xgb_mape</th>\n",
       "      <th>result_Xgb_R2</th>\n",
       "      <th>Xgb_data_act_pred</th>\n",
       "      <th>result_Lgb_mse</th>\n",
       "      <th>result_Lgb_mae</th>\n",
       "      <th>result_Lgb_mape</th>\n",
       "      <th>result_Lgb_R2</th>\n",
       "      <th>Lgb_data_act_pred</th>\n",
       "      <th>features</th>\n",
       "      <th>n_features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>0.156241</td>\n",
       "      <td>-7</td>\n",
       "      <td>18.461274</td>\n",
       "      <td>0.499196</td>\n",
       "      <td>0.584276</td>\n",
       "      <td>1.696125</td>\n",
       "      <td>0.307331</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.92...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.306573</td>\n",
       "      <td>0.510202</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.45...</td>\n",
       "      <td>0.641888</td>\n",
       "      <td>0.584613</td>\n",
       "      <td>1.711977</td>\n",
       "      <td>0.109335</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.44...</td>\n",
       "      <td>['Target', 'TMUS', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0.092686</td>\n",
       "      <td>-4</td>\n",
       "      <td>24.377353</td>\n",
       "      <td>0.509682</td>\n",
       "      <td>0.575972</td>\n",
       "      <td>1.685484</td>\n",
       "      <td>0.292781</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.49...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.442724</td>\n",
       "      <td>0.402126</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.21...</td>\n",
       "      <td>0.493983</td>\n",
       "      <td>0.556832</td>\n",
       "      <td>1.628692</td>\n",
       "      <td>0.314563</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.84...</td>\n",
       "      <td>['Target', 'INTU', 'BKNG']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0.097010</td>\n",
       "      <td>-6</td>\n",
       "      <td>18.843823</td>\n",
       "      <td>0.401006</td>\n",
       "      <td>0.546323</td>\n",
       "      <td>1.588377</td>\n",
       "      <td>0.443576</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.64...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.229129</td>\n",
       "      <td>0.604572</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.18...</td>\n",
       "      <td>0.462211</td>\n",
       "      <td>0.529034</td>\n",
       "      <td>1.544198</td>\n",
       "      <td>0.358649</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.23...</td>\n",
       "      <td>['Target', 'AMD', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.149273</td>\n",
       "      <td>-3</td>\n",
       "      <td>35.099774</td>\n",
       "      <td>0.329603</td>\n",
       "      <td>0.454062</td>\n",
       "      <td>1.324876</td>\n",
       "      <td>0.542653</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.67...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.403558</td>\n",
       "      <td>0.431673</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.17...</td>\n",
       "      <td>0.467467</td>\n",
       "      <td>0.525373</td>\n",
       "      <td>1.530577</td>\n",
       "      <td>0.351356</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.69...</td>\n",
       "      <td>['Target', 'TMUS', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.041269</td>\n",
       "      <td>-5</td>\n",
       "      <td>33.142119</td>\n",
       "      <td>0.315066</td>\n",
       "      <td>0.432751</td>\n",
       "      <td>1.265961</td>\n",
       "      <td>0.562824</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.31...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.481581</td>\n",
       "      <td>0.428186</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.61...</td>\n",
       "      <td>0.453607</td>\n",
       "      <td>0.534512</td>\n",
       "      <td>1.555020</td>\n",
       "      <td>0.370588</td>\n",
       "      <td>True       Pred\\n0   36.299999  36.75...</td>\n",
       "      <td>['Target', 'TMUS', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   lookback  granger_lags  granger_pval  cross_lag_max    ls_corr  \\\n",
       "0         8             5      0.156241             -7  18.461274   \n",
       "1         6             4      0.092686             -4  24.377353   \n",
       "2         7             4      0.097010             -6  18.843823   \n",
       "3         4             5      0.149273             -3  35.099774   \n",
       "4         3             3      0.041269             -5  33.142119   \n",
       "\n",
       "   result_Cat_mse  result_Cat_mae  result_Cat_mape  result_Cat_R2  \\\n",
       "0        0.499196        0.584276         1.696125       0.307331   \n",
       "1        0.509682        0.575972         1.685484       0.292781   \n",
       "2        0.401006        0.546323         1.588377       0.443576   \n",
       "3        0.329603        0.454062         1.324876       0.542653   \n",
       "4        0.315066        0.432751         1.265961       0.562824   \n",
       "\n",
       "                                   Cat_data_act_pred  ...  result_Xgb_mape  \\\n",
       "0           True       Pred\\n0   36.299999  36.92...  ...         1.306573   \n",
       "1           True       Pred\\n0   36.299999  36.49...  ...         1.442724   \n",
       "2           True       Pred\\n0   36.299999  36.64...  ...         1.229129   \n",
       "3           True       Pred\\n0   36.299999  36.67...  ...         1.403558   \n",
       "4           True       Pred\\n0   36.299999  36.31...  ...         1.481581   \n",
       "\n",
       "   result_Xgb_R2                                  Xgb_data_act_pred  \\\n",
       "0       0.510202           True       Pred\\n0   36.299999  36.45...   \n",
       "1       0.402126           True       Pred\\n0   36.299999  36.21...   \n",
       "2       0.604572           True       Pred\\n0   36.299999  36.18...   \n",
       "3       0.431673           True       Pred\\n0   36.299999  36.17...   \n",
       "4       0.428186           True       Pred\\n0   36.299999  36.61...   \n",
       "\n",
       "   result_Lgb_mse result_Lgb_mae  result_Lgb_mape  result_Lgb_R2  \\\n",
       "0        0.641888       0.584613         1.711977       0.109335   \n",
       "1        0.493983       0.556832         1.628692       0.314563   \n",
       "2        0.462211       0.529034         1.544198       0.358649   \n",
       "3        0.467467       0.525373         1.530577       0.351356   \n",
       "4        0.453607       0.534512         1.555020       0.370588   \n",
       "\n",
       "                                   Lgb_data_act_pred  \\\n",
       "0           True       Pred\\n0   36.299999  36.44...   \n",
       "1           True       Pred\\n0   36.299999  36.84...   \n",
       "2           True       Pred\\n0   36.299999  36.23...   \n",
       "3           True       Pred\\n0   36.299999  36.69...   \n",
       "4           True       Pred\\n0   36.299999  36.75...   \n",
       "\n",
       "                     features n_features  \n",
       "0  ['Target', 'TMUS', 'INTU']          3  \n",
       "1  ['Target', 'INTU', 'BKNG']          3  \n",
       "2   ['Target', 'AMD', 'INTU']          3  \n",
       "3  ['Target', 'TMUS', 'INTU']          3  \n",
       "4  ['Target', 'TMUS', 'INTU']          3  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(FILES_CONSTS.get('data'))\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "70084685-1e3f-4239-b1ff-5e0ada8682fc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lookback</th>\n",
       "      <th>granger_lags</th>\n",
       "      <th>granger_pval</th>\n",
       "      <th>cross_lag_max</th>\n",
       "      <th>ls_corr</th>\n",
       "      <th>result_Cat_mse</th>\n",
       "      <th>result_Cat_mae</th>\n",
       "      <th>result_Cat_mape</th>\n",
       "      <th>result_Cat_R2</th>\n",
       "      <th>Cat_data_act_pred</th>\n",
       "      <th>...</th>\n",
       "      <th>result_Xgb_mape</th>\n",
       "      <th>result_Xgb_R2</th>\n",
       "      <th>Xgb_data_act_pred</th>\n",
       "      <th>result_Lgb_mse</th>\n",
       "      <th>result_Lgb_mae</th>\n",
       "      <th>result_Lgb_mape</th>\n",
       "      <th>result_Lgb_R2</th>\n",
       "      <th>Lgb_data_act_pred</th>\n",
       "      <th>features</th>\n",
       "      <th>n_features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>0.156241</td>\n",
       "      <td>-7</td>\n",
       "      <td>18.461274</td>\n",
       "      <td>0.499196</td>\n",
       "      <td>0.584276</td>\n",
       "      <td>1.696125</td>\n",
       "      <td>0.307331</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.924...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.306573</td>\n",
       "      <td>0.510202</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.456...</td>\n",
       "      <td>0.641888</td>\n",
       "      <td>0.584613</td>\n",
       "      <td>1.711977</td>\n",
       "      <td>0.109335</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.446...</td>\n",
       "      <td>['Target', 'TMUS', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0.092686</td>\n",
       "      <td>-4</td>\n",
       "      <td>24.377353</td>\n",
       "      <td>0.509682</td>\n",
       "      <td>0.575972</td>\n",
       "      <td>1.685484</td>\n",
       "      <td>0.292781</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.493...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.442724</td>\n",
       "      <td>0.402126</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.217...</td>\n",
       "      <td>0.493983</td>\n",
       "      <td>0.556832</td>\n",
       "      <td>1.628692</td>\n",
       "      <td>0.314563</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.843...</td>\n",
       "      <td>['Target', 'INTU', 'BKNG']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0.097010</td>\n",
       "      <td>-6</td>\n",
       "      <td>18.843823</td>\n",
       "      <td>0.401006</td>\n",
       "      <td>0.546323</td>\n",
       "      <td>1.588377</td>\n",
       "      <td>0.443576</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.649...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.229129</td>\n",
       "      <td>0.604572</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.188...</td>\n",
       "      <td>0.462211</td>\n",
       "      <td>0.529034</td>\n",
       "      <td>1.544198</td>\n",
       "      <td>0.358649</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.237...</td>\n",
       "      <td>['Target', 'AMD', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.149273</td>\n",
       "      <td>-3</td>\n",
       "      <td>35.099774</td>\n",
       "      <td>0.329603</td>\n",
       "      <td>0.454062</td>\n",
       "      <td>1.324876</td>\n",
       "      <td>0.542653</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.672...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.403558</td>\n",
       "      <td>0.431673</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.171...</td>\n",
       "      <td>0.467467</td>\n",
       "      <td>0.525373</td>\n",
       "      <td>1.530577</td>\n",
       "      <td>0.351356</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.699...</td>\n",
       "      <td>['Target', 'TMUS', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.041269</td>\n",
       "      <td>-5</td>\n",
       "      <td>33.142119</td>\n",
       "      <td>0.315066</td>\n",
       "      <td>0.432751</td>\n",
       "      <td>1.265961</td>\n",
       "      <td>0.562824</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.310...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.481581</td>\n",
       "      <td>0.428186</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.613...</td>\n",
       "      <td>0.453607</td>\n",
       "      <td>0.534512</td>\n",
       "      <td>1.555020</td>\n",
       "      <td>0.370588</td>\n",
       "      <td>True       Pred\n",
       "0   36.299999  36.755...</td>\n",
       "      <td>['Target', 'TMUS', 'INTU']</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   lookback  granger_lags  granger_pval  cross_lag_max    ls_corr  \\\n",
       "0         8             5      0.156241             -7  18.461274   \n",
       "1         6             4      0.092686             -4  24.377353   \n",
       "2         7             4      0.097010             -6  18.843823   \n",
       "3         4             5      0.149273             -3  35.099774   \n",
       "4         3             3      0.041269             -5  33.142119   \n",
       "\n",
       "   result_Cat_mse  result_Cat_mae  result_Cat_mape  result_Cat_R2  \\\n",
       "0        0.499196        0.584276         1.696125       0.307331   \n",
       "1        0.509682        0.575972         1.685484       0.292781   \n",
       "2        0.401006        0.546323         1.588377       0.443576   \n",
       "3        0.329603        0.454062         1.324876       0.542653   \n",
       "4        0.315066        0.432751         1.265961       0.562824   \n",
       "\n",
       "                                   Cat_data_act_pred  ...  result_Xgb_mape  \\\n",
       "0           True       Pred\n",
       "0   36.299999  36.924...  ...         1.306573   \n",
       "1           True       Pred\n",
       "0   36.299999  36.493...  ...         1.442724   \n",
       "2           True       Pred\n",
       "0   36.299999  36.649...  ...         1.229129   \n",
       "3           True       Pred\n",
       "0   36.299999  36.672...  ...         1.403558   \n",
       "4           True       Pred\n",
       "0   36.299999  36.310...  ...         1.481581   \n",
       "\n",
       "   result_Xgb_R2                                  Xgb_data_act_pred  \\\n",
       "0       0.510202           True       Pred\n",
       "0   36.299999  36.456...   \n",
       "1       0.402126           True       Pred\n",
       "0   36.299999  36.217...   \n",
       "2       0.604572           True       Pred\n",
       "0   36.299999  36.188...   \n",
       "3       0.431673           True       Pred\n",
       "0   36.299999  36.171...   \n",
       "4       0.428186           True       Pred\n",
       "0   36.299999  36.613...   \n",
       "\n",
       "   result_Lgb_mse result_Lgb_mae  result_Lgb_mape  result_Lgb_R2  \\\n",
       "0        0.641888       0.584613         1.711977       0.109335   \n",
       "1        0.493983       0.556832         1.628692       0.314563   \n",
       "2        0.462211       0.529034         1.544198       0.358649   \n",
       "3        0.467467       0.525373         1.530577       0.351356   \n",
       "4        0.453607       0.534512         1.555020       0.370588   \n",
       "\n",
       "                                   Lgb_data_act_pred  \\\n",
       "0           True       Pred\n",
       "0   36.299999  36.446...   \n",
       "1           True       Pred\n",
       "0   36.299999  36.843...   \n",
       "2           True       Pred\n",
       "0   36.299999  36.237...   \n",
       "3           True       Pred\n",
       "0   36.299999  36.699...   \n",
       "4           True       Pred\n",
       "0   36.299999  36.755...   \n",
       "\n",
       "                     features n_features  \n",
       "0  ['Target', 'TMUS', 'INTU']          3  \n",
       "1  ['Target', 'INTU', 'BKNG']          3  \n",
       "2   ['Target', 'AMD', 'INTU']          3  \n",
       "3  ['Target', 'TMUS', 'INTU']          3  \n",
       "4  ['Target', 'TMUS', 'INTU']          3  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models = Model_filter(data)\n",
    "models = models.output_model_filter()\n",
    "models.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "bb4c0461-76f7-4569-9891-4165b9bde4aa",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>True</th>\n",
       "      <th>Pred</th>\n",
       "      <th>Index</th>\n",
       "      <th>Correlation</th>\n",
       "      <th>Mape</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "      <th>R2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.53306742857143, 36.34014114285714, 36.5574...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>0.848827</td>\n",
       "      <td>1.424240</td>\n",
       "      <td>0.380678</td>\n",
       "      <td>0.616991</td>\n",
       "      <td>0.471782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.504745428571425, 36.34671657142857, 36.533...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>0.845665</td>\n",
       "      <td>1.424377</td>\n",
       "      <td>0.384903</td>\n",
       "      <td>0.620406</td>\n",
       "      <td>0.465919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.53634342857143, 36.33894228571429, 36.5308...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>0.848872</td>\n",
       "      <td>1.429032</td>\n",
       "      <td>0.382619</td>\n",
       "      <td>0.618562</td>\n",
       "      <td>0.469089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.51598821428571, 36.33939835714286, 36.5365...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>0.845935</td>\n",
       "      <td>1.430887</td>\n",
       "      <td>0.384869</td>\n",
       "      <td>0.620378</td>\n",
       "      <td>0.465967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.53509057142857, 36.3335145, 36.53153935714...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>0.841251</td>\n",
       "      <td>1.441996</td>\n",
       "      <td>0.394402</td>\n",
       "      <td>0.628015</td>\n",
       "      <td>0.452739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.516684, 36.34074592857143, 36.525925142857...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>0.852404</td>\n",
       "      <td>1.402233</td>\n",
       "      <td>0.368241</td>\n",
       "      <td>0.606828</td>\n",
       "      <td>0.489040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.48829657142857, 36.33206257142857, 36.5608...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>0.847185</td>\n",
       "      <td>1.418004</td>\n",
       "      <td>0.378889</td>\n",
       "      <td>0.615540</td>\n",
       "      <td>0.474264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.49860628571428, 36.3237725, 36.54450542857...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb1...</td>\n",
       "      <td>0.848713</td>\n",
       "      <td>1.413612</td>\n",
       "      <td>0.376966</td>\n",
       "      <td>0.613976</td>\n",
       "      <td>0.476933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.53163214285714, 36.32238507142857, 36.5349...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb3, Lgb1...</td>\n",
       "      <td>0.848822</td>\n",
       "      <td>1.421420</td>\n",
       "      <td>0.378437</td>\n",
       "      <td>0.615172</td>\n",
       "      <td>0.474892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.49462628571428, 36.32576100000001, 36.5342...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb2, Lgb3, Lgb1...</td>\n",
       "      <td>0.847494</td>\n",
       "      <td>1.410549</td>\n",
       "      <td>0.378579</td>\n",
       "      <td>0.615288</td>\n",
       "      <td>0.474694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.51335592857143, 36.34546185714286, 36.5654...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Lgb4, Lgb2, Lgb3, Lgb1...</td>\n",
       "      <td>0.847893</td>\n",
       "      <td>1.408587</td>\n",
       "      <td>0.376209</td>\n",
       "      <td>0.613359</td>\n",
       "      <td>0.477983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.48257492857143, 36.303897642857144, 36.545...</td>\n",
       "      <td>Cat4, Cat3, Cat2, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...</td>\n",
       "      <td>0.842503</td>\n",
       "      <td>1.404140</td>\n",
       "      <td>0.377672</td>\n",
       "      <td>0.614550</td>\n",
       "      <td>0.475953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.5021865, 36.32335742857143, 36.55855735714...</td>\n",
       "      <td>Cat4, Cat3, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...</td>\n",
       "      <td>0.842882</td>\n",
       "      <td>1.410299</td>\n",
       "      <td>0.382447</td>\n",
       "      <td>0.618423</td>\n",
       "      <td>0.469327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.50053464285715, 36.342831714285715, 36.566...</td>\n",
       "      <td>Cat4, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...</td>\n",
       "      <td>0.843924</td>\n",
       "      <td>1.430842</td>\n",
       "      <td>0.387407</td>\n",
       "      <td>0.622420</td>\n",
       "      <td>0.462446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>[36.299999, 36.049999, 35.950001, 35.41, 35.43...</td>\n",
       "      <td>[36.526370642857145, 36.360670428571424, 36.59...</td>\n",
       "      <td>Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...</td>\n",
       "      <td>0.844723</td>\n",
       "      <td>1.436711</td>\n",
       "      <td>0.390888</td>\n",
       "      <td>0.625210</td>\n",
       "      <td>0.457615</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 True  \\\n",
       "0   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "1   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "2   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "3   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "4   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "5   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "6   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "7   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "8   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "9   [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "10  [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "11  [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "12  [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "13  [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "14  [36.299999, 36.049999, 35.950001, 35.41, 35.43...   \n",
       "\n",
       "                                                 Pred  \\\n",
       "0   [36.53306742857143, 36.34014114285714, 36.5574...   \n",
       "1   [36.504745428571425, 36.34671657142857, 36.533...   \n",
       "2   [36.53634342857143, 36.33894228571429, 36.5308...   \n",
       "3   [36.51598821428571, 36.33939835714286, 36.5365...   \n",
       "4   [36.53509057142857, 36.3335145, 36.53153935714...   \n",
       "5   [36.516684, 36.34074592857143, 36.525925142857...   \n",
       "6   [36.48829657142857, 36.33206257142857, 36.5608...   \n",
       "7   [36.49860628571428, 36.3237725, 36.54450542857...   \n",
       "8   [36.53163214285714, 36.32238507142857, 36.5349...   \n",
       "9   [36.49462628571428, 36.32576100000001, 36.5342...   \n",
       "10  [36.51335592857143, 36.34546185714286, 36.5654...   \n",
       "11  [36.48257492857143, 36.303897642857144, 36.545...   \n",
       "12  [36.5021865, 36.32335742857143, 36.55855735714...   \n",
       "13  [36.50053464285715, 36.342831714285715, 36.566...   \n",
       "14  [36.526370642857145, 36.360670428571424, 36.59...   \n",
       "\n",
       "                                                Index  Correlation      Mape  \\\n",
       "0   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...     0.848827  1.424240   \n",
       "1   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...     0.845665  1.424377   \n",
       "2   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...     0.848872  1.429032   \n",
       "3   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...     0.845935  1.430887   \n",
       "4   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...     0.841251  1.441996   \n",
       "5   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...     0.852404  1.402233   \n",
       "6   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...     0.847185  1.418004   \n",
       "7   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb1...     0.848713  1.413612   \n",
       "8   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb3, Lgb1...     0.848822  1.421420   \n",
       "9   Cat4, Cat3, Cat2, Cat0, Cat1, Lgb2, Lgb3, Lgb1...     0.847494  1.410549   \n",
       "10  Cat4, Cat3, Cat2, Cat0, Lgb4, Lgb2, Lgb3, Lgb1...     0.847893  1.408587   \n",
       "11  Cat4, Cat3, Cat2, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...     0.842503  1.404140   \n",
       "12  Cat4, Cat3, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...     0.842882  1.410299   \n",
       "13  Cat4, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...     0.843924  1.430842   \n",
       "14  Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1...     0.844723  1.436711   \n",
       "\n",
       "         MSE      RMSE        R2  \n",
       "0   0.380678  0.616991  0.471782  \n",
       "1   0.384903  0.620406  0.465919  \n",
       "2   0.382619  0.618562  0.469089  \n",
       "3   0.384869  0.620378  0.465967  \n",
       "4   0.394402  0.628015  0.452739  \n",
       "5   0.368241  0.606828  0.489040  \n",
       "6   0.378889  0.615540  0.474264  \n",
       "7   0.376966  0.613976  0.476933  \n",
       "8   0.378437  0.615172  0.474892  \n",
       "9   0.378579  0.615288  0.474694  \n",
       "10  0.376209  0.613359  0.477983  \n",
       "11  0.377672  0.614550  0.475953  \n",
       "12  0.382447  0.618423  0.469327  \n",
       "13  0.387407  0.622420  0.462446  \n",
       "14  0.390888  0.625210  0.457615  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comb_models = pd.read_parquet(FILES_CONSTS.get('comb_models'))\n",
    "comb_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "11b46b8e-275b-47fd-b2e8-8309a0a79239",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1, Xgb2, Xgb0, Xgb3, Xgb4, Xgb1',\n",
       " 'Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3, Lgb1, Lgb0, Xgb2, Xgb0, Xgb4, Xgb1')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_models = Selected_models(comb_models)\n",
    "selected_models = selected_models.selected_models_output()\n",
    "selected_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "5961a04f-6c3e-4c19-a543-a101eb2bb701",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_predictors = pd.read_csv(FILES_CONSTS.get('df_predictors'))\n",
    "df_target = pd.read_csv(FILES_CONSTS.get('df_target'), usecols=['Date', 'CSX'])\n",
    "columns_predictors = df_predictors.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "b7cd527e-a04b-4a69-9d17-1d5c123b5885",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>CSX</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-07-17</td>\n",
       "      <td>33.220001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-07-18</td>\n",
       "      <td>33.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-07-19</td>\n",
       "      <td>33.799999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-07-20</td>\n",
       "      <td>33.709999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-07-21</td>\n",
       "      <td>32.459999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>2024-05-03</td>\n",
       "      <td>33.849998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>2024-05-06</td>\n",
       "      <td>33.680000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>2024-05-07</td>\n",
       "      <td>33.959999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>34.220001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>2024-05-09</td>\n",
       "      <td>34.459999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>207 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date        CSX\n",
       "0    2023-07-17  33.220001\n",
       "1    2023-07-18  33.750000\n",
       "2    2023-07-19  33.799999\n",
       "3    2023-07-20  33.709999\n",
       "4    2023-07-21  32.459999\n",
       "..          ...        ...\n",
       "202  2024-05-03  33.849998\n",
       "203  2024-05-06  33.680000\n",
       "204  2024-05-07  33.959999\n",
       "205  2024-05-08  34.220001\n",
       "206  2024-05-09  34.459999\n",
       "\n",
       "[207 rows x 2 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "d71dd7a9-31e9-46ba-952f-88ed69191128",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Создание объекта класса DataFrameProcessor и выполнение обработки данных\n",
    "processor = DataFrameProcessor(df_predictors, df_target, columns_predictors, constants)\n",
    "processor.handle_exceptions(processor.transform_and_sort_dates)\n",
    "processor.handle_exceptions(processor.process_data)\n",
    "processor.handle_exceptions(processor.post_process_data)\n",
    "processor.handle_exceptions(processor.merge_dfs)\n",
    "processed_df, retransform = processor.handle_exceptions(processor.get_processed_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "51a158cd-9c25-42cb-bfd5-898371957d43",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ensemble_models = Ensemble_prediction(processed_df, selected_models, comb_models, models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "241e7ebe-569b-451b-9b87-8ea4e2eba8e5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ensemble_models = ensemble_models.select_features_models()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "d0731ea0-4407-479e-865f-7107df0f9d70",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Back</th>\n",
       "      <th>Real</th>\n",
       "      <th>Pred</th>\n",
       "      <th>Correlation</th>\n",
       "      <th>Mape</th>\n",
       "      <th>MSE</th>\n",
       "      <th>MAE</th>\n",
       "      <th>RMSE</th>\n",
       "      <th>R2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lgb1</td>\n",
       "      <td>[36.85, 36.54, 36.32, 36.46, 36.06, 36.02, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.58881386673433, 36.334959542103086, 36.565...</td>\n",
       "      <td>0.933307</td>\n",
       "      <td>0.897623</td>\n",
       "      <td>0.176533</td>\n",
       "      <td>0.308889</td>\n",
       "      <td>0.420159</td>\n",
       "      <td>0.800288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Xgb4</td>\n",
       "      <td>[36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[37.34099, 37.01132, 36.65155, 36.39804, 36.48...</td>\n",
       "      <td>0.938878</td>\n",
       "      <td>0.755606</td>\n",
       "      <td>0.125856</td>\n",
       "      <td>0.259630</td>\n",
       "      <td>0.354762</td>\n",
       "      <td>0.857620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lgb4</td>\n",
       "      <td>[36.89, 36.89, 36.36, 36.55, 36.09, 36.23, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[37.294889357198635, 36.893219835518224, 36.84...</td>\n",
       "      <td>0.917272</td>\n",
       "      <td>1.094298</td>\n",
       "      <td>0.236667</td>\n",
       "      <td>0.377778</td>\n",
       "      <td>0.486484</td>\n",
       "      <td>0.732259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Xgb1</td>\n",
       "      <td>[36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[37.005047, 36.670074, 36.51793, 36.635826, 36...</td>\n",
       "      <td>0.938878</td>\n",
       "      <td>0.755606</td>\n",
       "      <td>0.125856</td>\n",
       "      <td>0.259630</td>\n",
       "      <td>0.354762</td>\n",
       "      <td>0.857620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cat2</td>\n",
       "      <td>[36.53, 36.45, 36.16, 36.31, 36.07, 35.97, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.93699926274345, 36.79724571457963, 36.5166...</td>\n",
       "      <td>0.938917</td>\n",
       "      <td>0.784742</td>\n",
       "      <td>0.130911</td>\n",
       "      <td>0.269629</td>\n",
       "      <td>0.361816</td>\n",
       "      <td>0.851900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Xgb0</td>\n",
       "      <td>[36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.932686, 37.085217, 36.729424, 36.753, 36.4...</td>\n",
       "      <td>0.938878</td>\n",
       "      <td>0.755606</td>\n",
       "      <td>0.125856</td>\n",
       "      <td>0.259630</td>\n",
       "      <td>0.354762</td>\n",
       "      <td>0.857620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Lgb0</td>\n",
       "      <td>[36.73, 36.53, 36.08, 36.35, 36.11, 35.98, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.67968162514189, 36.686345098729745, 36.670...</td>\n",
       "      <td>0.923290</td>\n",
       "      <td>0.932712</td>\n",
       "      <td>0.175385</td>\n",
       "      <td>0.320741</td>\n",
       "      <td>0.418790</td>\n",
       "      <td>0.801587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cat1</td>\n",
       "      <td>[36.56, 36.48, 36.15, 36.31, 36.03, 35.97, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.78498777625197, 36.55639143311089, 36.2973...</td>\n",
       "      <td>0.939900</td>\n",
       "      <td>0.775871</td>\n",
       "      <td>0.130452</td>\n",
       "      <td>0.266666</td>\n",
       "      <td>0.361181</td>\n",
       "      <td>0.852420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Xgb3</td>\n",
       "      <td>[36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[37.09349, 36.773106, 37.009727, 36.727512, 36...</td>\n",
       "      <td>0.938878</td>\n",
       "      <td>0.755606</td>\n",
       "      <td>0.125856</td>\n",
       "      <td>0.259630</td>\n",
       "      <td>0.354762</td>\n",
       "      <td>0.857620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lgb3</td>\n",
       "      <td>[36.74, 36.63, 36.33, 36.53, 36.23, 36.13, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[37.123679794342884, 36.68446263122268, 36.533...</td>\n",
       "      <td>0.919486</td>\n",
       "      <td>1.041270</td>\n",
       "      <td>0.211619</td>\n",
       "      <td>0.358889</td>\n",
       "      <td>0.460020</td>\n",
       "      <td>0.760596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Cat4</td>\n",
       "      <td>[36.55, 36.52, 36.25, 36.29, 36.02, 35.99, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.583349900189866, 36.1943435526105, 35.8769...</td>\n",
       "      <td>0.941264</td>\n",
       "      <td>0.807961</td>\n",
       "      <td>0.134304</td>\n",
       "      <td>0.277778</td>\n",
       "      <td>0.366475</td>\n",
       "      <td>0.848062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Xgb2</td>\n",
       "      <td>[36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[37.20577, 37.014744, 36.636585, 36.567825, 36...</td>\n",
       "      <td>0.938878</td>\n",
       "      <td>0.755606</td>\n",
       "      <td>0.125856</td>\n",
       "      <td>0.259630</td>\n",
       "      <td>0.354762</td>\n",
       "      <td>0.857620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lgb2</td>\n",
       "      <td>[36.59, 36.45, 36.11, 36.2, 36.05, 36.03, 35.4...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.82553419333914, 36.50910974962964, 36.5208...</td>\n",
       "      <td>0.928340</td>\n",
       "      <td>0.841507</td>\n",
       "      <td>0.153311</td>\n",
       "      <td>0.288889</td>\n",
       "      <td>0.391550</td>\n",
       "      <td>0.826559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Cat3</td>\n",
       "      <td>[36.57, 36.49, 36.23, 36.31, 36.08, 35.98, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.79421670284456, 36.479663602290906, 36.483...</td>\n",
       "      <td>0.943511</td>\n",
       "      <td>0.769875</td>\n",
       "      <td>0.128819</td>\n",
       "      <td>0.264815</td>\n",
       "      <td>0.358913</td>\n",
       "      <td>0.854268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Cat0</td>\n",
       "      <td>[36.53, 36.45, 36.17, 36.31, 36.09, 35.99, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[37.022599345956884, 37.01830662959171, 36.875...</td>\n",
       "      <td>0.939049</td>\n",
       "      <td>0.788641</td>\n",
       "      <td>0.132178</td>\n",
       "      <td>0.271111</td>\n",
       "      <td>0.363563</td>\n",
       "      <td>0.850467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>[36.6, 36.5, 36.19, 36.34, 36.07, 36.0, 35.5, ...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.97, 36.72, 36.58, 36.49, 36.37, 36.09, 36....</td>\n",
       "      <td>0.937989</td>\n",
       "      <td>0.820693</td>\n",
       "      <td>0.138282</td>\n",
       "      <td>0.282222</td>\n",
       "      <td>0.371862</td>\n",
       "      <td>0.843562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...</td>\n",
       "      <td>[36.61, 36.51, 36.19, 36.34, 36.07, 36.01, 35....</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.94, 36.71, 36.55, 36.47, 36.34, 36.05, 36....</td>\n",
       "      <td>0.937017</td>\n",
       "      <td>0.831496</td>\n",
       "      <td>0.141259</td>\n",
       "      <td>0.285926</td>\n",
       "      <td>0.375845</td>\n",
       "      <td>0.840194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>(Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb...</td>\n",
       "      <td>[36.61, 36.5, 36.19, 36.34, 36.07, 36.0, 35.5,...</td>\n",
       "      <td>[36.41999816894531, 36.119998931884766, 36.299...</td>\n",
       "      <td>[36.96, 36.72, 36.56, 36.48, 36.36, 36.07, 36....</td>\n",
       "      <td>0.937597</td>\n",
       "      <td>0.823963</td>\n",
       "      <td>0.139419</td>\n",
       "      <td>0.283333</td>\n",
       "      <td>0.373388</td>\n",
       "      <td>0.842276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Model  \\\n",
       "0                                                Lgb1   \n",
       "1                                                Xgb4   \n",
       "2                                                Lgb4   \n",
       "3                                                Xgb1   \n",
       "4                                                Cat2   \n",
       "5                                                Xgb0   \n",
       "6                                                Lgb0   \n",
       "7                                                Cat1   \n",
       "8                                                Xgb3   \n",
       "9                                                Lgb3   \n",
       "10                                               Cat4   \n",
       "11                                               Xgb2   \n",
       "12                                               Lgb2   \n",
       "13                                               Cat3   \n",
       "14                                               Cat0   \n",
       "15  Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...   \n",
       "16  Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb3...   \n",
       "17  (Cat4, Cat3, Cat2, Cat0, Cat1, Lgb4, Lgb2, Lgb...   \n",
       "\n",
       "                                                 Back  \\\n",
       "0   [36.85, 36.54, 36.32, 36.46, 36.06, 36.02, 35....   \n",
       "1   [36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...   \n",
       "2   [36.89, 36.89, 36.36, 36.55, 36.09, 36.23, 35....   \n",
       "3   [36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...   \n",
       "4   [36.53, 36.45, 36.16, 36.31, 36.07, 35.97, 35....   \n",
       "5   [36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...   \n",
       "6   [36.73, 36.53, 36.08, 36.35, 36.11, 35.98, 35....   \n",
       "7   [36.56, 36.48, 36.15, 36.31, 36.03, 35.97, 35....   \n",
       "8   [36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...   \n",
       "9   [36.74, 36.63, 36.33, 36.53, 36.23, 36.13, 35....   \n",
       "10  [36.55, 36.52, 36.25, 36.29, 36.02, 35.99, 35....   \n",
       "11  [36.51, 36.42, 36.12, 36.3, 36.05, 35.95, 35.4...   \n",
       "12  [36.59, 36.45, 36.11, 36.2, 36.05, 36.03, 35.4...   \n",
       "13  [36.57, 36.49, 36.23, 36.31, 36.08, 35.98, 35....   \n",
       "14  [36.53, 36.45, 36.17, 36.31, 36.09, 35.99, 35....   \n",
       "15  [36.6, 36.5, 36.19, 36.34, 36.07, 36.0, 35.5, ...   \n",
       "16  [36.61, 36.51, 36.19, 36.34, 36.07, 36.01, 35....   \n",
       "17  [36.61, 36.5, 36.19, 36.34, 36.07, 36.0, 35.5,...   \n",
       "\n",
       "                                                 Real  \\\n",
       "0   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "1   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "2   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "3   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "4   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "5   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "6   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "7   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "8   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "9   [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "10  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "11  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "12  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "13  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "14  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "15  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "16  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "17  [36.41999816894531, 36.119998931884766, 36.299...   \n",
       "\n",
       "                                                 Pred  Correlation      Mape  \\\n",
       "0   [36.58881386673433, 36.334959542103086, 36.565...     0.933307  0.897623   \n",
       "1   [37.34099, 37.01132, 36.65155, 36.39804, 36.48...     0.938878  0.755606   \n",
       "2   [37.294889357198635, 36.893219835518224, 36.84...     0.917272  1.094298   \n",
       "3   [37.005047, 36.670074, 36.51793, 36.635826, 36...     0.938878  0.755606   \n",
       "4   [36.93699926274345, 36.79724571457963, 36.5166...     0.938917  0.784742   \n",
       "5   [36.932686, 37.085217, 36.729424, 36.753, 36.4...     0.938878  0.755606   \n",
       "6   [36.67968162514189, 36.686345098729745, 36.670...     0.923290  0.932712   \n",
       "7   [36.78498777625197, 36.55639143311089, 36.2973...     0.939900  0.775871   \n",
       "8   [37.09349, 36.773106, 37.009727, 36.727512, 36...     0.938878  0.755606   \n",
       "9   [37.123679794342884, 36.68446263122268, 36.533...     0.919486  1.041270   \n",
       "10  [36.583349900189866, 36.1943435526105, 35.8769...     0.941264  0.807961   \n",
       "11  [37.20577, 37.014744, 36.636585, 36.567825, 36...     0.938878  0.755606   \n",
       "12  [36.82553419333914, 36.50910974962964, 36.5208...     0.928340  0.841507   \n",
       "13  [36.79421670284456, 36.479663602290906, 36.483...     0.943511  0.769875   \n",
       "14  [37.022599345956884, 37.01830662959171, 36.875...     0.939049  0.788641   \n",
       "15  [36.97, 36.72, 36.58, 36.49, 36.37, 36.09, 36....     0.937989  0.820693   \n",
       "16  [36.94, 36.71, 36.55, 36.47, 36.34, 36.05, 36....     0.937017  0.831496   \n",
       "17  [36.96, 36.72, 36.56, 36.48, 36.36, 36.07, 36....     0.937597  0.823963   \n",
       "\n",
       "         MSE       MAE      RMSE        R2  \n",
       "0   0.176533  0.308889  0.420159  0.800288  \n",
       "1   0.125856  0.259630  0.354762  0.857620  \n",
       "2   0.236667  0.377778  0.486484  0.732259  \n",
       "3   0.125856  0.259630  0.354762  0.857620  \n",
       "4   0.130911  0.269629  0.361816  0.851900  \n",
       "5   0.125856  0.259630  0.354762  0.857620  \n",
       "6   0.175385  0.320741  0.418790  0.801587  \n",
       "7   0.130452  0.266666  0.361181  0.852420  \n",
       "8   0.125856  0.259630  0.354762  0.857620  \n",
       "9   0.211619  0.358889  0.460020  0.760596  \n",
       "10  0.134304  0.277778  0.366475  0.848062  \n",
       "11  0.125856  0.259630  0.354762  0.857620  \n",
       "12  0.153311  0.288889  0.391550  0.826559  \n",
       "13  0.128819  0.264815  0.358913  0.854268  \n",
       "14  0.132178  0.271111  0.363563  0.850467  \n",
       "15  0.138282  0.282222  0.371862  0.843562  \n",
       "16  0.141259  0.285926  0.375845  0.840194  \n",
       "17  0.139419  0.283333  0.373388  0.842276  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ensemble_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "9c710ef4-9370-44ef-9fc1-f243c4de3230",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "keep_data = Output_ensemble(processed_df, ensemble_models)\n",
    "keep_data = keep_data.last_keep()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "2678ed27-686c-4785-9e8d-21dc07b68f48",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(keep_data['Back'], label='Back')\n",
    "plt.plot(keep_data['Real'], label='Real')\n",
    "plt.legend()\n",
    "plt.title('Back vs Pred')\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "57889943-dbf6-463c-9e25-21d78c78723b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>Back</th>\n",
       "      <th>Real</th>\n",
       "      <th>2W</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2024-04-05</td>\n",
       "      <td>36.96</td>\n",
       "      <td>36.299999</td>\n",
       "      <td>36.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024-04-08</td>\n",
       "      <td>36.72</td>\n",
       "      <td>36.049999</td>\n",
       "      <td>36.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2024-04-09</td>\n",
       "      <td>36.56</td>\n",
       "      <td>35.950001</td>\n",
       "      <td>36.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2024-04-10</td>\n",
       "      <td>36.48</td>\n",
       "      <td>35.410000</td>\n",
       "      <td>36.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2024-04-11</td>\n",
       "      <td>36.36</td>\n",
       "      <td>35.430000</td>\n",
       "      <td>36.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2024-04-12</td>\n",
       "      <td>36.07</td>\n",
       "      <td>35.340000</td>\n",
       "      <td>35.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2024-04-15</td>\n",
       "      <td>36.01</td>\n",
       "      <td>35.139999</td>\n",
       "      <td>35.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2024-04-16</td>\n",
       "      <td>35.76</td>\n",
       "      <td>34.840000</td>\n",
       "      <td>34.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2024-04-17</td>\n",
       "      <td>35.40</td>\n",
       "      <td>34.160000</td>\n",
       "      <td>34.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2024-04-18</td>\n",
       "      <td>34.94</td>\n",
       "      <td>34.389999</td>\n",
       "      <td>34.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2024-04-19</td>\n",
       "      <td>34.75</td>\n",
       "      <td>34.340000</td>\n",
       "      <td>34.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2024-04-22</td>\n",
       "      <td>34.64</td>\n",
       "      <td>34.619999</td>\n",
       "      <td>34.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2024-04-23</td>\n",
       "      <td>34.61</td>\n",
       "      <td>34.720001</td>\n",
       "      <td>34.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2024-04-24</td>\n",
       "      <td>34.60</td>\n",
       "      <td>33.669998</td>\n",
       "      <td>34.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2024-04-25</td>\n",
       "      <td>34.73</td>\n",
       "      <td>34.029999</td>\n",
       "      <td>34.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2024-04-26</td>\n",
       "      <td>34.86</td>\n",
       "      <td>33.990002</td>\n",
       "      <td>35.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2024-04-29</td>\n",
       "      <td>34.96</td>\n",
       "      <td>33.950001</td>\n",
       "      <td>35.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2024-04-30</td>\n",
       "      <td>35.10</td>\n",
       "      <td>33.220001</td>\n",
       "      <td>34.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2024-05-01</td>\n",
       "      <td>35.08</td>\n",
       "      <td>33.200001</td>\n",
       "      <td>34.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2024-05-02</td>\n",
       "      <td>34.43</td>\n",
       "      <td>33.570000</td>\n",
       "      <td>33.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2024-05-03</td>\n",
       "      <td>34.11</td>\n",
       "      <td>33.849998</td>\n",
       "      <td>33.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2024-05-06</td>\n",
       "      <td>33.83</td>\n",
       "      <td>33.680000</td>\n",
       "      <td>33.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2024-05-07</td>\n",
       "      <td>33.84</td>\n",
       "      <td>33.959999</td>\n",
       "      <td>33.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>33.84</td>\n",
       "      <td>34.220001</td>\n",
       "      <td>34.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2024-05-09</td>\n",
       "      <td>33.86</td>\n",
       "      <td>34.459999</td>\n",
       "      <td>34.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          date   Back       Real     2W\n",
       "0   2024-04-05  36.96  36.299999  36.56\n",
       "1   2024-04-08  36.72  36.049999  36.48\n",
       "2   2024-04-09  36.56  35.950001  36.36\n",
       "3   2024-04-10  36.48  35.410000  36.07\n",
       "4   2024-04-11  36.36  35.430000  36.01\n",
       "5   2024-04-12  36.07  35.340000  35.76\n",
       "6   2024-04-15  36.01  35.139999  35.40\n",
       "7   2024-04-16  35.76  34.840000  34.94\n",
       "8   2024-04-17  35.40  34.160000  34.75\n",
       "9   2024-04-18  34.94  34.389999  34.64\n",
       "10  2024-04-19  34.75  34.340000  34.61\n",
       "11  2024-04-22  34.64  34.619999  34.60\n",
       "12  2024-04-23  34.61  34.720001  34.73\n",
       "13  2024-04-24  34.60  33.669998  34.86\n",
       "14  2024-04-25  34.73  34.029999  34.96\n",
       "15  2024-04-26  34.86  33.990002  35.10\n",
       "16  2024-04-29  34.96  33.950001  35.08\n",
       "17  2024-04-30  35.10  33.220001  34.43\n",
       "18  2024-05-01  35.08  33.200001  34.11\n",
       "19  2024-05-02  34.43  33.570000  33.83\n",
       "20  2024-05-03  34.11  33.849998  33.84\n",
       "21  2024-05-06  33.83  33.680000  33.84\n",
       "22  2024-05-07  33.84  33.959999  33.86\n",
       "23  2024-05-08  33.84  34.220001  34.09\n",
       "24  2024-05-09  33.86  34.459999  34.30"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keep_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "54b2f086-b2c0-4bb5-ac87-8e3e385517e0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>Back</th>\n",
       "      <th>Real</th>\n",
       "      <th>2W</th>\n",
       "      <th>Real_pct_change</th>\n",
       "      <th>Back_change</th>\n",
       "      <th>2W_change</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2024-04-05</td>\n",
       "      <td>36.96</td>\n",
       "      <td>36.299999</td>\n",
       "      <td>36.56</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024-04-08</td>\n",
       "      <td>36.72</td>\n",
       "      <td>36.049999</td>\n",
       "      <td>36.48</td>\n",
       "      <td>-0.688705</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2024-04-09</td>\n",
       "      <td>36.56</td>\n",
       "      <td>35.950001</td>\n",
       "      <td>36.36</td>\n",
       "      <td>-0.277388</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2024-04-10</td>\n",
       "      <td>36.48</td>\n",
       "      <td>35.410000</td>\n",
       "      <td>36.07</td>\n",
       "      <td>-1.502089</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2024-04-11</td>\n",
       "      <td>36.36</td>\n",
       "      <td>35.430000</td>\n",
       "      <td>36.01</td>\n",
       "      <td>0.056483</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2024-04-12</td>\n",
       "      <td>36.07</td>\n",
       "      <td>35.340000</td>\n",
       "      <td>35.76</td>\n",
       "      <td>-0.254022</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2024-04-15</td>\n",
       "      <td>36.01</td>\n",
       "      <td>35.139999</td>\n",
       "      <td>35.40</td>\n",
       "      <td>-0.565933</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2024-04-16</td>\n",
       "      <td>35.76</td>\n",
       "      <td>34.840000</td>\n",
       "      <td>34.94</td>\n",
       "      <td>-0.853726</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2024-04-17</td>\n",
       "      <td>35.40</td>\n",
       "      <td>34.160000</td>\n",
       "      <td>34.75</td>\n",
       "      <td>-1.951780</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2024-04-18</td>\n",
       "      <td>34.94</td>\n",
       "      <td>34.389999</td>\n",
       "      <td>34.64</td>\n",
       "      <td>0.673301</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2024-04-19</td>\n",
       "      <td>34.75</td>\n",
       "      <td>34.340000</td>\n",
       "      <td>34.61</td>\n",
       "      <td>-0.145389</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2024-04-22</td>\n",
       "      <td>34.64</td>\n",
       "      <td>34.619999</td>\n",
       "      <td>34.60</td>\n",
       "      <td>0.815372</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2024-04-23</td>\n",
       "      <td>34.61</td>\n",
       "      <td>34.720001</td>\n",
       "      <td>34.73</td>\n",
       "      <td>0.288857</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2024-04-24</td>\n",
       "      <td>34.60</td>\n",
       "      <td>33.669998</td>\n",
       "      <td>34.86</td>\n",
       "      <td>-3.024202</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2024-04-25</td>\n",
       "      <td>34.73</td>\n",
       "      <td>34.029999</td>\n",
       "      <td>34.96</td>\n",
       "      <td>1.069203</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2024-04-26</td>\n",
       "      <td>34.86</td>\n",
       "      <td>33.990002</td>\n",
       "      <td>35.10</td>\n",
       "      <td>-0.117535</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2024-04-29</td>\n",
       "      <td>34.96</td>\n",
       "      <td>33.950001</td>\n",
       "      <td>35.08</td>\n",
       "      <td>-0.117684</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2024-04-30</td>\n",
       "      <td>35.10</td>\n",
       "      <td>33.220001</td>\n",
       "      <td>34.43</td>\n",
       "      <td>-2.150220</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2024-05-01</td>\n",
       "      <td>35.08</td>\n",
       "      <td>33.200001</td>\n",
       "      <td>34.11</td>\n",
       "      <td>-0.060206</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2024-05-02</td>\n",
       "      <td>34.43</td>\n",
       "      <td>33.570000</td>\n",
       "      <td>33.83</td>\n",
       "      <td>1.114455</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2024-05-03</td>\n",
       "      <td>34.11</td>\n",
       "      <td>33.849998</td>\n",
       "      <td>33.84</td>\n",
       "      <td>0.834074</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2024-05-06</td>\n",
       "      <td>33.83</td>\n",
       "      <td>33.680000</td>\n",
       "      <td>33.84</td>\n",
       "      <td>-0.502210</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2024-05-07</td>\n",
       "      <td>33.84</td>\n",
       "      <td>33.959999</td>\n",
       "      <td>33.86</td>\n",
       "      <td>0.831350</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>33.84</td>\n",
       "      <td>34.220001</td>\n",
       "      <td>34.09</td>\n",
       "      <td>0.765613</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2024-05-09</td>\n",
       "      <td>33.86</td>\n",
       "      <td>34.459999</td>\n",
       "      <td>34.30</td>\n",
       "      <td>0.701338</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          date   Back       Real     2W  Real_pct_change  Back_change  \\\n",
       "0   2024-04-05  36.96  36.299999  36.56              NaN            0   \n",
       "1   2024-04-08  36.72  36.049999  36.48        -0.688705            0   \n",
       "2   2024-04-09  36.56  35.950001  36.36        -0.277388            0   \n",
       "3   2024-04-10  36.48  35.410000  36.07        -1.502089            0   \n",
       "4   2024-04-11  36.36  35.430000  36.01         0.056483            0   \n",
       "5   2024-04-12  36.07  35.340000  35.76        -0.254022            0   \n",
       "6   2024-04-15  36.01  35.139999  35.40        -0.565933            0   \n",
       "7   2024-04-16  35.76  34.840000  34.94        -0.853726            0   \n",
       "8   2024-04-17  35.40  34.160000  34.75        -1.951780            0   \n",
       "9   2024-04-18  34.94  34.389999  34.64         0.673301            0   \n",
       "10  2024-04-19  34.75  34.340000  34.61        -0.145389            0   \n",
       "11  2024-04-22  34.64  34.619999  34.60         0.815372            0   \n",
       "12  2024-04-23  34.61  34.720001  34.73         0.288857            0   \n",
       "13  2024-04-24  34.60  33.669998  34.86        -3.024202            0   \n",
       "14  2024-04-25  34.73  34.029999  34.96         1.069203            1   \n",
       "15  2024-04-26  34.86  33.990002  35.10        -0.117535            1   \n",
       "16  2024-04-29  34.96  33.950001  35.08        -0.117684            1   \n",
       "17  2024-04-30  35.10  33.220001  34.43        -2.150220            1   \n",
       "18  2024-05-01  35.08  33.200001  34.11        -0.060206            0   \n",
       "19  2024-05-02  34.43  33.570000  33.83         1.114455            0   \n",
       "20  2024-05-03  34.11  33.849998  33.84         0.834074            0   \n",
       "21  2024-05-06  33.83  33.680000  33.84        -0.502210            0   \n",
       "22  2024-05-07  33.84  33.959999  33.86         0.831350            1   \n",
       "23  2024-05-08  33.84  34.220001  34.09         0.765613            0   \n",
       "24  2024-05-09  33.86  34.459999  34.30         0.701338            1   \n",
       "\n",
       "    2W_change  \n",
       "0           0  \n",
       "1           0  \n",
       "2           0  \n",
       "3           0  \n",
       "4           0  \n",
       "5           0  \n",
       "6           0  \n",
       "7           0  \n",
       "8           0  \n",
       "9           0  \n",
       "10          0  \n",
       "11          0  \n",
       "12          1  \n",
       "13          1  \n",
       "14          1  \n",
       "15          1  \n",
       "16          0  \n",
       "17          0  \n",
       "18          0  \n",
       "19          0  \n",
       "20          1  \n",
       "21          0  \n",
       "22          1  \n",
       "23          1  \n",
       "24          1  "
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Вычисляем процентное изменение для столбца 'Real'\n",
    "keep_data['Real_pct_change'] = keep_data['Real'].pct_change()*100\n",
    "\n",
    "# Создаем новые столбцы для 'Back' и '2W'\n",
    "keep_data['Back_change'] = (keep_data['Back'].diff() > 0).astype(int)\n",
    "keep_data['2W_change'] = (keep_data['2W'].diff() > 0).astype(int)\n",
    "\n",
    "keep_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "a0c81649-4f74-476b-95ab-405d58f7e503",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Наш депозит 1000 бачей\n",
    "result = 0\n",
    "\n",
    "# Запускаем итератор для просмотра результата\n",
    "for i in range(1,len(keep_data)):\n",
    "    if keep_data['Back_change'][i] == 0:\n",
    "        result -= keep_data['Real_pct_change'][i]\n",
    "    elif keep_data['Back_change'][i] != 0:\n",
    "        result += keep_data['Real_pct_change'][i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "d7a08fe6-9d61-4c0a-878c-a7d84596fb7e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Накапало за 34 дня(дней): 5.49% без плеч\n"
     ]
    }
   ],
   "source": [
    "print(f\"Накапало за {(keep_data['date'].iloc[-1] - keep_data['date'][0]).days} дня(дней): {round(result,2)}% без плеч\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "713c7a07-48c9-4d6a-a6ef-af2203ff38c2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
